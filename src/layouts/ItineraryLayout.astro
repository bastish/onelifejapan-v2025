---
import HeadComponent from '../components/Head/HeadComponent.astro';
import TopNav from '../components/TopNav/TopNav.astro';
import Footer from '../components/Footer/Footer.astro';
import BottomBanner from '../components/BottomBanner.astro';
import ItineraryCardList from '../components/ItineraryCardList.astro';
import PurchaseBlock from '../components/PurchaseBlock.astro';
import GenericSlider from '../components/GenericSlider.astro';
import ItineraryBasicInfo from '../components/ItineraryBasicInfo.astro';
//import ItinerarySampleItineraryDay from '../components/ItinerarySampleItineraryDay.astro';
import ItinerarySampleItinerarySection from '../components/ItinerarySampleItinerarySection.astro';
import ItineraryPossibleHighlights from '../components/ItineraryPossibleHighlights.astro';
import ItineraryDifficulty from '../components/ItineraryDifficulty.astro';
import ItineraryPricingDetails from '../components/ItineraryPricingDetails.astro';
import ItineraryDatesAndAvailability from '../components/ItineraryDatesAndAvailability.astro';
import CustomItinerarySampleItinerarySection from '..//components/CustomItinerarySampleItinerarySection.astro';
import CustomItineraryPossibleHighlights from '../components/CustomItineraryPossibleHighlights.astro';
//import CustomItineraryCollapsibleChecklist from '../components/CustomItineraryCollapsibleChecklist.astro';
//import CustomItinerary from '../components/CustomItinerary.astro';
import ItinerarySectionContainer from '../components/ItinerarySectionContainer.astro';
import ItineraryLayoutNav from '../components/ItineraryLayoutNav.astro';
import background from '../assets/background.svg';
import '../styles/global.scss';

let itinerary: any = Astro.props.itinerary;
import { loadItinerary } from '../utils/loadItinerary.ts';
import { loadCustomItinerary, customItineraryList } from '../utils/loadCustomItinerary';
//let itinerary = await loadItinerary(id);

// // astro-dynamic-embed
//console.log(itinerary.pricingIntro);
import { AstroEmbedComponents, embedComponents } from '../astroEmbedComponent/astroEmbedComponents';
let aecComponents: any[] = [];
[aecComponents, itinerary] = embedComponents(aecComponents, itinerary);

const {
    title,
    description
} = itinerary;

let page = 'itinerary';
let customItineraries = null;
let customClass = '';

if (itinerary.id === 7) {
    page = 'customIndex';
    customItineraries = await customItineraryList();
    customClass = 'is-custom';
}

const hasDayItineraries = itinerary && itinerary.dayItineraries && itinerary.dayItineraries.length > 0;
const hasCustomRoutes = itinerary?.custom_itinerary?.routes && itinerary.custom_itinerary.routes.length > 0;

---

<!doctype html>
<html lang="en">
    <head>
        <HeadComponent title={title} description={description} />
        <slot name="head" />
    </head>
    <body>
        <img id="background" src={background.src} alt="" fetchpriority="high" />

        <div class="custom-container">
            <TopNav />
        </div>
        <div id="topSlider">
            {itinerary.sliderImage ? <GenericSlider sliderImageId={itinerary.sliderImage.id} height={175} /> : <div />}
        </div>
        <div id="stickynav-placeholder" style="display: block; height: 0;"></div>
        
        <ItineraryLayoutNav itinerary={itinerary} />
                
        <div class="custom-container itinerary-main">   

            <ItinerarySectionContainer>
                <PurchaseBlock page={page} itinerary={itinerary} />
            </ItinerarySectionContainer>        
            

            <ItinerarySectionContainer sectionTitle="" sectionAnchorId="basic-info">
                {
                    page === 'customIndex' ? (
                        <div
                            set:html={itinerary.longDescription}
                            class="formatted-long-description custom-top"
                            style="margin-top: 100px margin-bottom: 10px;"
                        />
                    ) : (
                        <ItineraryBasicInfo itinerary={itinerary} />
                    )
                }
            </ItinerarySectionContainer>
            
            
            <ItineraryCardList itineraries={customItineraries} page={page} />




            <!-- Days Section -->
            {page === 'customIndex' ? <></> : 
                <ItinerarySectionContainer 
                    sectionTitle={hasCustomRoutes ? 'Route Notes' : 'A Sample Itinerary'} 
                    sectionAnchorId="sample-itinerary"
                >
                    {hasCustomRoutes 
                        ? <CustomItinerarySampleItinerarySection itinerary={itinerary} />
                        : <ItinerarySampleItinerarySection itinerary={itinerary} />
                    }
                </ItinerarySectionContainer>
            }


            <!-- Hihglights Section -->
            {page === 'customIndex' ? <></> :
                <ItinerarySectionContainer sectionTitle="Possible Highlights" sectionAnchorId="highlights">
                    {!hasCustomRoutes && <ItineraryPossibleHighlights itinerary={itinerary} /> }
                    {hasCustomRoutes && <CustomItineraryPossibleHighlights itinerary={itinerary} /> }
                    
                </ItinerarySectionContainer>
            }

                        
            <!-- Difficulty Section -->
            <ItinerarySectionContainer sectionTitle="Difficulty" sectionAnchorId="difficulty">
                    <ItineraryDifficulty itinerary={itinerary} />
            </ItinerarySectionContainer>
            
            <!-- Price Section -->
                <ItinerarySectionContainer sectionTitle="Price Estimates" sectionAnchorId="pricing-details">
                    <ItineraryPricingDetails itinerary={itinerary} />
                </ItinerarySectionContainer>
            <!-- Dates Section -->
            <ItinerarySectionContainer sectionTitle="Dates & Availability" sectionAnchorId="dates-and-availability">
                <ItineraryDatesAndAvailability itinerary={itinerary} />
            </ItinerarySectionContainer>

        </div>

        <!-- <BottomBanner /> -->
        <Footer />

        <AstroEmbedComponents aecComponents={aecComponents} />
    </body>
</html>

<style lang="scss">
    @use '../styles/global' as *;

    .itinerary-main {
        padding: 0px;
        margin-top: 20px;
        //border: 1px solid green;
    }


    .headline,
    .short-slogan,
    .inner-headline {
        text-align: center;
    }
    .headline {
        padding-top: 20px;
    }
    .inner-headline {
        padding-top: 5px;
        margin-bottom: 0px;
    }

    .short-slogan {
        font-size: 1.3em;
        padding: 20px;
        font-weight: normal;
        /* color: var(--bs-primary-dark);
    color: var(--bs-primary); */
    }
    .itinerary-fixed-nav {
        position: relative;
        z-index: 1030;
        background: #fff;
        padding-top: 0px; /* Top padding when fixed */
    }
    .itinerary-fixed-nav::before,
    .itinerary-fixed-nav::after {
        content: '';
        position: absolute;
        left: 0;
        right: 0;
        height: 1px;
        background: #ddd;
        width: 100vw; /* Full width of the viewport */
        margin-left: -50vw; /* Offset half the viewport width to align */
        left: 50%; /* Start at the middle of the viewport */
    }
    .itinerary-fixed-nav::before {
        top: 0;
    }
    .itinerary-fixed-nav::after {
        bottom: 0;
    }
    .is-fixed {
        position: fixed;
        top: 75px; /* Adjust this based on your main navbar's height */
        top: 0;
        width: 100%;
        background: #fff; /* Ensures background is applied */
        transition: top 0.3s ease; /* Smooth transition for the top property */
    }
    .inner-container {
        max-width: 1200px; /* Adjust based on your container width */
        margin: 0 auto;
        padding: 0 15px; /* Optional padding */
    }

    .section-inner {
        border: 1px solid #ddd;
        background: var(--opaque-white-8);
        background: var(--opaque-primary-mid);

        padding-left: 20px;
        padding-right: 20px;
        padding-top: 20px;
    }

    @include respond-to(medium) {
        .section-inner {
            padding-left: 5px;
            padding-right: 5px;
        }
    }

    @include respond-to(small) {
        .is-fixed {
            position: unset;
        }
    }
.itinerary-fixed-nav {
    position: relative;
    z-index: 1500;
    background: #fff;
    transition: position 0.3s ease;

    &.is-sticky {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
}

</style>



<!-- Self-contained inline script to adjust visibility and lazy-load iframes -->
<script is:inline>
    function loadIframe(iframe) {
        if (!iframe.src) {
            const dataSrc = iframe.getAttribute('data-src');
            if (dataSrc) {
                iframe.src = dataSrc;
            }
        }
    }
    function adjustEmbeds() {
        
        // Find all embed containers rendered by this component.
        const embeds = document.querySelectorAll('.rwgps-embed');
        embeds.forEach((embed) => {
            const id = embed.getAttribute('id') || '';
            if (window.innerWidth <= 576) {
                // On small screens, display elements with "small" in the id.
                if (id.indexOf('small') !== -1) {
                    embed.style.display = 'block';
                } else {
                    embed.style.display = 'none';
                }
            } else {
                // On larger screens, display elements with "large" in the id.
                if (id.indexOf('large') !== -1) {
                    embed.style.display = 'block';
                } else {
                    embed.style.display = 'none';
                }
            }
            // If visible, lazy-load the iframe.
            if (embed.style.display === 'block') {
                const iframe = embed.querySelector('.rwgps-iframe');
                if (iframe) loadIframe(iframe);
            }
        });
    }
    // Run when the component's container is inserted or changed.
    // const container = document.getElementById(`rwgps-map-${uniqueId}`);
    // if (container) {
    //     // Create an observer to watch for child changes.
    //     const observer = new MutationObserver((mutationsList, obs) => {
    //         adjustEmbeds();
    //     });
    //     observer.observe(container, { childList: true, subtree: true });
    // }
    document.addEventListener('DOMContentLoaded', adjustEmbeds);
    window.addEventListener('resize', adjustEmbeds);
    document.addEventListener('ajaxContentLoaded', function() {
        window.adjustEmbeds();
    });
</script>
