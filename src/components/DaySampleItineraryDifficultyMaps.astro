---
// DaySampleItineraryDifficultyMaps.astro.

import RWGPSMapEmbed from '../components/RWGPSMapEmbed.astro';
const { route } = Astro.props;

let rwgpsId = route.RWGPSId;
if (!rwgpsId && route.mapLink) {
    const parts = route.mapLink.split('/');
    rwgpsId = parts[parts.length - 1]; // The last part should be the RWGPS ID.
}

// Base URL using the RWGPS ID.
const baseEmbedUrl = `https://ridewithgps.com/embeds?type=route&id=${rwgpsId}`;

// map options:
const distanceMarkers = true;
const sampleGraph = true;
const metricUnits = true;
const showPhotos = true;
const overlay = 'terrain';

// Create a URL object from the base URL
const urlObj = new URL(baseEmbedUrl);

// Set query parameters based on your options
urlObj.searchParams.set('distanceMarkers', distanceMarkers ? 'true' : '');
urlObj.searchParams.set('sampleGraph', sampleGraph ? 'true' : '');
urlObj.searchParams.set('metricUnits', metricUnits ? 'true' : '');
urlObj.searchParams.set('showPhotos', showPhotos ? 'true' : '');
urlObj.searchParams.set('overlay', overlay || '');

// Convert back to a string.
const embedUrl = urlObj.toString();
---

<style lang="scss">
    .rwgps-embed {
        border: 1px solid var(--bs-primary-dark);
        position: relative;
        /* Hide both versions by default */
        display: none;
    }
</style>

<div class="panel panel-green">
    <!-- Embed version for larger screens (700px height) -->

    <div id={`rwgps-large-${route.id}`} class="rwgps-embed" data-rwgps-id={route.RWGPSId}>
        <iframe
            class="rwgps-iframe"
            data-src={embedUrl}
            style="width: 1px; min-width: 100%; height: 700px; border: none;"
            scrolling="no"></iframe>
    </div>

    <div id={`rwgps-small-${route.id}`} class="rwgps-embed" data-rwgps-id={route.RWGPSId}>
        <iframe
            class="rwgps-iframe"
            data-src={embedUrl}
            style="width: 1px; min-width: 100%; height: 500px; border: none;"
            scrolling="no"></iframe>
    </div>
</div>

<script>
    function loadIframe(iframe: HTMLIFrameElement) {
        if (!iframe.src) {
            const dataSrc = iframe.getAttribute('data-src');
            if (dataSrc) {
                iframe.src = dataSrc;
            }
        }
    }

    // Function to adjust which embed is visible based on the viewport width.
    function adjustEmbeds(): void {
        // Query for all .rwgps-embed elements as HTMLDivElement
        const embeds = document.querySelectorAll<HTMLDivElement>('.rwgps-embed');
        embeds.forEach((embed) => {
            if (window.innerWidth <= 576) {
                if (embed.id.indexOf('small') !== -1) {
                    embed.style.display = 'block';
                } else {
                    embed.style.display = 'none';
                }
            } else {
                if (embed.id.indexOf('large') !== -1) {
                    embed.style.display = 'block';
                } else {
                    embed.style.display = 'none';
                }
            }
            // If this embed is visible, load its iframe if not already loaded.
            if (embed.style.display === 'block') {
                const iframe = embed.querySelector('.rwgps-iframe') as HTMLIFrameElement;
                if (iframe) {
                    loadIframe(iframe);
                }
            }
        });
    }
    // When the DOM content is loaded, adjust embeds.
    document.addEventListener('DOMContentLoaded', adjustEmbeds);
    window.addEventListener('resize', adjustEmbeds);

    // If using Bootstrap modal, listen for when the modal is shown.
    document.addEventListener('shown.bs.modal', (event) => {
        const modal = event.target as HTMLElement;
        // Find any embeds within this modal and load their iframes.
        modal!.querySelectorAll('.rwgps-embed').forEach((embed) => {
            const iframe = embed.querySelector('.rwgps-iframe') as HTMLIFrameElement | null;
            if (iframe) {
                loadIframe(iframe);
            }
        });
    });

    // If using Bootstrap tabs, listen for when a tab is shown.
    document.addEventListener('shown.bs.tab', (event) => {
        const closestTab = event.target as HTMLElement;
        const tabPane = closestTab.closest('.tab-pane');
        if (tabPane) {
            tabPane.querySelectorAll('.rwgps-embed').forEach((embed) => {
                const iframe = embed.querySelector('.rwgps-iframe') as HTMLIFrameElement | null;
                if (iframe) {
                    loadIframe(iframe);
                }
            });
        }
    });

    // document.addEventListener('DOMContentLoaded', adjustEmbeds);
    // window.addEventListener('resize', adjustEmbeds);
</script>
