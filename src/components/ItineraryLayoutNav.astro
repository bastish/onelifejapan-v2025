---
const { itinerary, activePage } = Astro.props;
// Extract day titles from itinerary.dayItineraries
const days = itinerary.dayItineraries
    ? itinerary.dayItineraries.map((dayItinerary: any) => ({ title: dayItinerary.title, slug: dayItinerary.slug }))
    : [];
const urlBase = `/itinerary/${itinerary.id}/${itinerary.slug}`;
---

<!-- Itinerary nav that appears below TopSlider and then sticks at the top -->
<div class="itinerary-fixed-nav" id="sticky-nav">
    <div class="nav-container">
        <div class="inner-container">
            <div class="inner-headline">
                <h1 id="inner" style="display: none;">{itinerary.title}</h1>
            </div>
            <div class="itinerary-nav-container">
                <!-- Removed the Menu button -->
                <ul class="inline-links itinerary-nav">
                    <li class={activePage === 'overview' ? 'active' : ''}>
                        <a class="button-link" href="#basic-info">Overview</a>
                    </li>
                    <li class={`dropdown ${activePage === 'sample-itinerary' ? 'active' : ''}`}>
                        <a class="button-link dropdown-toggle" href="#sample-itinerary">
                            Itinerary <span class="small-screen-hide">Details</span>
                        </a>
                        <ul class="dropdown-menu">
                            <li>
                                <a class="dropdown-item" href={`#sample-itinerary`}> - Itinerary Details </a>
                            </li>
                            {
                                days.map((day: any) => (
                                    <li>
                                        <a class="dropdown-item" href={`#${day.slug}`}>
                                            {day.title}
                                        </a>
                                    </li>
                                ))
                            }
                        </ul>
                    </li>
                    <li class={activePage === 'highlights' ? 'active' : ''}>
                        <a class="button-link" href="#highlights">Highlights</a>
                    </li>
                    <li class={activePage === 'difficulty' ? 'active' : ''}>
                        <a class="button-link" href="#difficulty">Difficulty</a>
                    </li>
                    <li class={activePage === 'pricing-details' ? 'active' : ''}>
                        <a class="button-link" href="#pricing-details">
                            Pricing <span class="small-screen-hide">Details</span>
                        </a>
                    </li>
                    <li class={activePage === 'dates-and-availability' ? 'active' : ''}>
                        <a class="button-link" href="#dates-and-availability">
                            Dates <span class="small-screen-hide">& Availability</span>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const stickyNav = document.getElementById('sticky-nav');
        const stickyNavPlaceholder = document.getElementById('stickynav-placeholder');
        const mainNav = document.querySelector('.navbar'); // Main TopNav

        let ticking = false;

        function updateSticky() {
            if (!stickyNav || !mainNav || !stickyNavPlaceholder) return;
            // Get current position of the sticky nav relative to viewport
            const stickyNavPosition = stickyNav.getBoundingClientRect();
            const mainNavPosition = mainNav.getBoundingClientRect();
            const stickyNavPlaceholderPosition = stickyNavPlaceholder.getBoundingClientRect();
            // console.log('stickyNavPosition', stickyNavPosition.x, stickyNavPosition.y);
            // console.log('stickyNavPosition.top', stickyNavPosition.top);

            // Hysteresis: add fixed state when nav goes above -70px,
            // and remove it when nav is lower than 10px from top.
            if (stickyNavPosition.top <= -70 && !stickyNav.classList.contains('is-fixed')) {
                stickyNav.classList.add('is-fixed');
            } else if (stickyNavPosition.top > 70 && stickyNav.classList.contains('is-fixed')) {
                stickyNav.classList.remove('is-fixed');
            }

            // Adjust top offset based on main nav's visibility.
            // Assumes main nav is 75px tall when visible.

            if (mainNav && !mainNav.classList.contains('hidden-nav')) {
                if (window.matchMedia('(max-width: 992px)').matches) {
                    // hamburger menu width when logo gets smaller
                    stickyNav.style.top = '55px'; // Mobile offset
                } else {
                    stickyNav.style.top = '65px'; // Desktop offset
                }
            } else {
                stickyNav.style.top = '0';
            }
            if (stickyNavPlaceholderPosition.top >= 70) {
                stickyNav.classList.remove('is-fixed');
            }

            // console.log('stickyNavPlaceholderPosition.top', stickyNavPlaceholderPosition.top);
            // console.log('stickyNavPosition.top', stickyNavPosition.top);

            // if (mainNavPosition.top <= 0) {
            //     stickyNav.classList.add('is-swapped');
            // }
            if (mainNav && !mainNav.classList.contains('hidden-nav')) {
                document.documentElement.style.scrollPaddingTop = '180px';
            } else {
                document.documentElement.style.scrollPaddingTop = '80px';
            }
            ticking = false;
        }

        function checkSticky() {
            if (!ticking) {
                window.requestAnimationFrame(updateSticky);
                ticking = true;
            }
        }

        window.addEventListener('scroll', checkSticky);
        window.addEventListener('resize', checkSticky);
    });
</script>

<style lang="scss">
    @import '../styles/global.scss';

    /* Itinerary nav container */
    .itinerary-fixed-nav {
        position: -webkit-sticky;
        position: sticky;
        top: 75px; /* Starts sticky at 75px below the viewport top */
        z-index: 1000;
        background: #fff;
        transition: all 0.3s ease;
    }

    /* When scrolled to the top, switch to fixed position */
    .itinerary-fixed-nav.is-fixed {
        position: fixed;
        top: 0;
    }

    .itinerary-nav-container {
        position: relative;
    }

    .itinerary-nav {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        list-style: none;
        padding: 0;
        margin: 0;
        gap: 5px;
    }

    .itinerary-nav.show {
        flex-direction: column;
    }

    .small-screen-hide {
        display: inline-block;
    }

    @include respond-to(large) {
        .button-link {
            padding: 5px 10px;
            font-size: 0.9em;
        }
        .small-screen-hide {
            display: none;
        }
    }

    .inline-links li {
        flex: 1;
        display: flex;
        justify-content: center;
        position: relative;
    }

    .button-link {
        display: inline-block;
        width: 100%;
        padding: 10px 15px;
        border: 2px solid;
        border: 0px solid;
        border-color: var(--bs-primary-secondary);
        border-radius: 4px;
        text-align: center;
        white-space: nowrap;
        box-sizing: border-box;
        text-decoration: none;
        background-color: transparent;
        font-size: 1.2em;
        font-weight: inherit;
    }

    .button-link:hover {
        background-color: var(--bs-link-color);
        background-color: var(--bs-primary-ultralight);
        background-color: #fff;
        border-color: var(--bs-link-color);
        color: var(--bs-link-hover-color);
        border: 1px solid var(--bs-primary-dark);
        background-color: var(--bs-primary-dark);
        color: #fff;
        background-color: #fff;
        color: var(--bs-primary-dark);
        padding-bottom: 0px;
        @include respond-to(small) {
            background-color: var(--bs-primary-dark);
            color: #fff;
        }
    }

    .button-link:active {
        background-color: #cce0ff;
        background-color: var(--bs-primary-ultralight);
        border: 1px solid var(--bs-primary-dark);
        color: #cce0ff;
    }

    .active .button-link {
        background-color: var(--bs-link-color);
    }

    /* Mobile adjustments */
    @include respond-to(small) {
        .itinerary-fixed-nav {
            background-color: var(--bs-primary-light-opaque);
        }
        .button-link {
            font-size: 0.9em;
            width: 100%;
            padding: 10px 5px;
            background-color: #f8f9fa;
            font-weight: 800;
        }
        .dropdown-menu {
            display: none;
        }
        .itinerary-nav {
            flex-wrap: wrap;
            justify-content: space-between;
            padding-bottom: 1px;
            gap: 0px;
        }
        .inline-links li {
            flex: 1 1 auto;
            min-width: 90px;
            margin: 0;
            margin-top: 0px;
        }
        .button-link {
            text-align: center;
            padding: 8px 4px;
            border: 2px solid var(--bs-primary-dark);
            border-radius: 0px;
        }
    }

    .is-swapped {
        position: fixed;
        top: 0;
        width: 100%;
        z-index: 1000;
    }

    /* Desktop: Show dropdown on hover or when an element within is focused */
    /* Default (Desktop) styling for the dropdown menu */
    @media (min-width: 993px) {
        .itinerary-fixed-nav .dropdown-menu {
            /* Use your standard desktop positioning (typically relative to the link) */
            position: absolute;
            left: 0; // Align left relative to the dropdown's parent (the <li>)
            width: auto; // Let it size naturally (or specify a width if desired)
            box-sizing: border-box;
            top: 100%; // Position immediately below the trigger
            padding: 0.5rem 0;
            border: 1px solid rgba(0, 0, 0, 0.15);
            border-radius: 0.25rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.175);
            display: none; // Hidden by default; shown via :hover or :focus-within
        }

        /* Show the dropdown on hover or focus */
        .itinerary-fixed-nav .dropdown:hover .dropdown-menu,
        .itinerary-fixed-nav .dropdown:focus-within .dropdown-menu {
            display: block;
        }
    }

    /* Mobile: Use click toggling */
    @media (max-width: 992px) {
        /* Remove any positioning from the dropdown container so the menu is positioned
     relative to the full-width itinerary nav */
        .itinerary-fixed-nav .dropdown {
            position: static;
        }

        /* Mobile dropdown menu positioning: keep your horizontal positioning intact */
        .itinerary-fixed-nav .dropdown-menu {
            display: none; /* Hidden by default */
            position: absolute;
            left: calc(50% - 50vw); /* Align with the viewport's left edge */
            width: 100vw; /* Span the full viewport width */
            box-sizing: border-box;
            top: 100%; /* Place directly below the trigger (adjust vertical spacing if needed) */
            padding: 0.5rem 0;
            border: 1px solid rgba(0, 0, 0, 0.15);
            border-radius: 0.25rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.175);
        }

        /* When toggled open, show the menu */
        .itinerary-fixed-nav .dropdown.open .dropdown-menu {
            display: block;
        }
    }
</style>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Check for mobile using a media query
        const isMobile = window.matchMedia('(max-width: 992px)').matches;
        const dropdownTriggers = document.querySelectorAll('.itinerary-fixed-nav .dropdown > .dropdown-toggle');

        if (isMobile) {
            // Toggle dropdown on click for mobile
            dropdownTriggers.forEach((trigger) => {
                trigger.addEventListener('click', function (e) {
                    e.preventDefault(); // Prevent default link action if any
                    const parentDropdown = trigger.parentElement;
                    parentDropdown!.classList.toggle('open');
                });

                // Optionally, close the dropdown when a dropdown item is clicked
                const dropdownItems = trigger.parentElement!.querySelectorAll('.dropdown-menu .dropdown-item');
                dropdownItems.forEach((item) => {
                    item.addEventListener('click', function () {
                        const parentDropdown = item.closest('.dropdown');
                        if (parentDropdown) {
                            parentDropdown.classList.remove('open');
                        }
                    });
                });
            });

            // Optional: close any open dropdown if clicking outside
            document.addEventListener('click', function (e: MouseEvent) {
                dropdownTriggers.forEach((trigger) => {
                    const parentDropdown = trigger.parentElement;
                    if (parentDropdown && e.target instanceof Element && !parentDropdown.contains(e.target)) {
                        parentDropdown.classList.remove('open');
                    }
                });
            });
        }
    });
</script>
