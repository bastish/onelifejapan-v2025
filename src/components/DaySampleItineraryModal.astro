---
//SampleItineraryDay.astro
import DaySampleItinerarySchedule from '../components/DaySampleItinerarySchedule.astro';
import DaySampleItineraryOverview from '../components/DaySampleItineraryOverview.astro';
import DaySampleItineraryHighlights from '../components/DaySampleItineraryHighlights.astro';
import DaySampleItineraryDifficulty from '../components/DaySampleItineraryDifficulty.astro';
import DaySampleItineraryAccommodation from '../components/DaySampleItineraryAccommodation.astro';

import { hasProperty } from '../utils/utilities.ts';
const { itinerary, dayItinerary } = Astro.props;
const modalId = `day-${dayItinerary.id}`;
---

<!-- Hidden element to expose the modal id to client-side JS -->
<div id="modal-info" data-modalid={modalId} style="display: none;"></div>
<div class="modal-info" data-modalid={modalId} style="display: none;"></div>

<!-- Day 1 Modal Popup -->
<div
    class="modal fade modal-xl modal-dialog-custom day-sample-itinerary-modal"
    id={`day-${dayItinerary.id}`}
    data-day-id={dayItinerary.id}
    tabindex="-1"
    aria-labelledby="myModalLabel"
    aria-hidden="true"
>
    <div class="modal-dialog itinerary-modal-dialog">
        <div class="modal-content itinerary-modal">
            <div class="modal-header">
                <h2 set:html={dayItinerary.title} />
                <button type="button" class="btn-close-custom" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="tab-v2">
                        <!-- Tab Navigation -->
                        <ul class="nav nav-tabs itinerary-nav-tabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button
                                    class="modal-nav-link active"
                                    id={`overview-tab-${dayItinerary.id}`}
                                    data-tab-target={`#overview-${dayItinerary.id}`}
                                    type="button"
                                    role="tab"
                                    aria-controls={`overview-${dayItinerary.id}`}
                                    aria-selected="true">Overview</button
                                >
                            </li>
                            {
                                hasProperty(dayItinerary, 'dayHighlights') && (
                                    <li class="nav-item" role="presentation">
                                        <button
                                            class="modal-nav-link"
                                            id={`highlights-tab-${dayItinerary.id}`}
                                            data-tab-target={`#highlights-${dayItinerary.id}`}
                                            type="button"
                                            role="tab"
                                            aria-controls={`highlights-${dayItinerary.id}`}
                                            aria-selected="false"
                                        >
                                            Highlights
                                        </button>
                                    </li>
                                )
                            }
                            {
                                hasProperty(dayItinerary, 'routes', 'routes_optional') && (
                                    <li class="nav-item" role="presentation">
                                        <button
                                            class="modal-nav-link"
                                            id={`difficulty-tab-${dayItinerary.id}`}
                                            data-tab-target={`#difficulty-${dayItinerary.id}`}
                                            type="button"
                                            role="tab"
                                            aria-controls={`difficulty-${dayItinerary.id}`}
                                            aria-selected="false"
                                        >
                                            Routes
                                        </button>
                                    </li>
                                )
                            }
                            {
                                hasProperty(dayItinerary, 'schedule.schedules') && (
                                    <li class="nav-item" role="presentation">
                                        <button
                                            class="modal-nav-link"
                                            id={`schedule-tab-${dayItinerary.id}`}
                                            data-tab-target={`#schedule-${dayItinerary.id}`}
                                            type="button"
                                            role="tab"
                                            aria-controls={`schedule-${dayItinerary.id}`}
                                            aria-selected="false"
                                        >
                                            Schedule
                                        </button>
                                    </li>
                                )
                            }
                            {
                                hasProperty(dayItinerary, 'accommodations') && (
                                    <li class="nav-item" role="presentation">
                                        <button
                                            class="modal-nav-link"
                                            id={`accommodation-tab-${dayItinerary.id}`}
                                            data-tab-target={`#accommodation-${dayItinerary.id}`}
                                            type="button"
                                            role="tab"
                                            aria-controls={`accommodation-${dayItinerary.id}`}
                                            aria-selected="false"
                                        >
                                            <span class="show-on-large">Accommodation</span>
                                            <span class="show-on-small">Stay</span>
                                        </button>
                                    </li>
                                )
                            }
                        </ul>

                        <div class="tab-content">
                            <div
                                class="tab-pane active"
                                id={`overview-${dayItinerary.id}`}
                                role="tabpanel"
                                aria-labelledby={`overview-tab-${dayItinerary.id}`}
                            >
                                <DaySampleItineraryOverview dayItinerary={dayItinerary} />
                            </div>

                            <div
                                class="tab-pane"
                                id={`highlights-${dayItinerary.id}`}
                                role="tabpanel"
                                aria-labelledby={`highlights-tab-${dayItinerary.id}`}
                            >
                                <DaySampleItineraryHighlights dayItinerary={dayItinerary} />
                            </div>
                            {
                                hasProperty(dayItinerary, 'schedule.schedules') && (
                                    <div
                                        class="tab-pane"
                                        id={`schedule-${dayItinerary.id}`}
                                        role="tabpanel"
                                        aria-labelledby={`schedule-tab-${dayItinerary.id}`}
                                    >
                                        <DaySampleItinerarySchedule dayItinerary={dayItinerary} />
                                    </div>
                                )
                            }
                            {
                                hasProperty(dayItinerary, 'routes', 'routes_optional') && (
                                    <div
                                        class="tab-pane"
                                        id={`difficulty-${dayItinerary.id}`}
                                        role="tabpanel"
                                        aria-labelledby={`difficulty-tab-${dayItinerary.id}`}
                                    >
                                        <DaySampleItineraryDifficulty
                                            dayItinerary={dayItinerary}
                                            modalId={`day-${dayItinerary.id}`}
                                        />
                                    </div>
                                )
                            }
                            {
                                hasProperty(dayItinerary, 'accommodations') && (
                                    <div
                                        class="tab-pane"
                                        id={`accommodation-${dayItinerary.id}`}
                                        role="tabpanel"
                                        aria-labelledby={`accommodation-tab-${dayItinerary.id}`}
                                    >
                                        <DaySampleItineraryAccommodation dayItinerary={dayItinerary} />
                                    </div>
                                )
                            }
                        </div>
                    </div>
                </div>
            </div>
            <!-- Bottom Shelf: Back and Close Buttons -->
            <div class="modal-bottom-shelf">
                <button class="modal-bottom-back">◀︎ Back</button>
                <button class="modal-bottom-close" data-bs-dismiss="modal" aria-label="Close"> Close </button>
            </div>
        </div>
    </div>
</div>

<style lang="scss">
    @import '../styles/global.scss';
    /* General tab styles */
    .nav-tabs {
        display: flex;
        list-style: none;
        padding: 0;
        margin: 0;
        border-bottom: 2px solid #ddd;
        @include respond-to(small) {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); // Adjust the columns to fit neatly
            gap: 5px;
            border: none;
        }
    }

    .nav-item {
        margin-right: 5px;
        @include respond-to(small) {
            margin-right: 0;
            border-bottom: 1px solid #ddd;
        }
    }

    .modal-content {
        border: 0px solid var(--bs-primary-ultradark);
        border-radius: 10px;
        padding-left: 15px;
        padding-right: 15px;
    }

    .modal-nav-link {
        padding: 10px 20px;
        cursor: pointer;
        border: 1px solid #ddd;
        border-bottom: none;
        background-color: #f8f9fa;
        transition:
            background-color 0.3s ease,
            border-color 0.3s ease;

        color: var(--bs-link-color);
        @include respond-to(small) {
            width: 100%;
            text-align: center;
            border: 2px solid var(--bs-primary-ultradark);
            color: var(--bs-primary-ultradark);
        }
    }

    .modal-nav-link:hover {
        background-color: #e9ecef;
        border-color: #ccc;
        color: var(--bs-link-hover-color);
    }

    .modal-nav-link.active {
        background-color: #fff;
        border-color: #ddd #ddd #fff;
        font-weight: normal;
        border-bottom: 5px solid var(--bs-primary-dark);
        color: var(--bs-primary-ultradark);
        @include respond-to(small) {
            border-bottom: 1px solid #ddd;
            border: 2px solid var(--bs-primary-ultradark);
            background-color: var(--bs-primary-ultradark);
            color: white;
        }
    }

    .tab-content {
        border: 0px solid #ddd;
        padding: 20px;
        margin-top: 30px;
    }

    .tab-pane {
        display: none;
    }

    .tab-pane.active {
        display: block;
    }

    .modal-xl {
        --bs-modal-width: 80%;
        @include respond-to(xlarge) {
            --bs-modal-width: 90%;
            //background: green;
        }
        @include respond-to(large) {
            --bs-modal-width: 90%;
            //background: green;
        }
        @include respond-to(medium) {
            //background: blue;
        }
        @include respond-to(small) {
            //background: red;
        }
    }

    .dropdown-itinerary-nav {
        display: none;

        @include respond-to(small) {
            display: block;
            width: 100%;
            margin-bottom: 1rem;
        }

        select {
            width: 100%;
            padding: 0.5rem;
            font-size: 1rem;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
    }

    .btn-close-custom {
        position: absolute;
        top: 10px;
        right: 10px;
        background: transparent;
        border: none;
        color: var(--bs-primary-ultradark);
        font-size: 1.8rem;
        line-height: 1;
        cursor: pointer;
        padding: 0.5rem;
        transition:
            transform 0.2s ease,
            color 0.2s ease;

        &:hover {
            transform: scale(1.1);
            color: var(--bs-link-hover-color);
        }

        &:focus {
            outline: 2px solid var(--bs-primary-ultradark);
            outline-offset: 2px;
        }
    }

    .show-on-small {
        display: none;
    }
    .show-on-large {
        display: block;
    }
    @media (max-width: 576px) {
        .show-on-small {
            display: block;
        }
        .show-on-large {
            display: none;
        }
        .modal-content {
            //border: 2px solid var(--bs-primary-ultradark);
            border-radius: 10px;
            padding-left: 0px;
            padding-right: 0px;
        }

        .tab-content {
            //border: 2px solid red;
            padding: 10px;
        }
        .hide-on-large {
            display: block;
        }
    }
</style>

<script>
    // When the DOM is loaded, initialize each modal.
    document.addEventListener('DOMContentLoaded', function () {
        const modalInfoEls = document.querySelectorAll('.modal-info');

        modalInfoEls.forEach((modalInfoEl) => {
            const modalId = modalInfoEl.getAttribute('data-modalid');
            const modalEl = modalId ? document.getElementById(modalId) : null;

            console.log('Setup modalId: ', modalId);
            console.log('Setup modalEl: ', modalEl);
            if (modalEl && modalId) {
                setupModal(modalEl, modalId);
                console.log('Setup Modal: ', modalId);
            }
        });
    });

    // Sets up the modal-specific event listeners and tab history.
    function setupModal(modalEl: HTMLElement, modalId: string) {
        let backButtonPushed = false;
        const customModalTabHistory: string[] = [];
        const customTabs = modalEl.querySelectorAll<HTMLButtonElement>('.nav-item .modal-nav-link');

        // Push the initially active tab into the custom history.
        const initialTabButton = modalEl.querySelector('.modal-nav-link.active');
        if (initialTabButton) {
            const initialTab = initialTabButton.getAttribute('data-tab-target') || '';
            customModalTabHistory.push(initialTab);
        }

        // Attach the tab click handler.
        customTabs.forEach((tab) => {
            // Remove any existing click listener, then add a new one.
            tab.removeEventListener('click', tabClickHandler as EventListener);
            tab.addEventListener('click', (event: any) => {
                tabClickHandler(event, modalEl, customTabs, customModalTabHistory, () => backButtonPushed);
            });
        });

        // Attach the back button handler.
        const backButton = modalEl.querySelector('.modal-bottom-back');
        if (backButton && modalId) {
            backButton.addEventListener('click', () => {
                const setBackButtonPushed = () => {
                    backButtonPushed = true;
                };
                const unsetBackButtonPushed = () => {
                    backButtonPushed = false;
                };
                backButtonClickHandler(modalEl, customModalTabHistory, setBackButtonPushed, unsetBackButtonPushed);
            });
        }
    }

    // Handles a tab click event.
    function tabClickHandler(
        event: Event,
        modalEl: HTMLElement,
        customTabs: NodeListOf<HTMLButtonElement>,
        customModalTabHistory: string[],
        isBackButtonPushed: () => boolean,
    ): void {
        event.preventDefault();

        // Remove active classes from tabs and panes in this modal.
        customTabs.forEach((tab) => tab.classList.remove('active'));
        const tabPanes = modalEl.querySelectorAll('.tab-pane');
        tabPanes.forEach((pane) => pane.classList.remove('show', 'active'));

        // Activate the clicked tab and its pane.

        const target = event.currentTarget as HTMLElement;
        target!.classList.add('active');
        const targetTab = target.getAttribute('data-tab-target') || '';
        const targetPane = modalEl.querySelector(targetTab);
        if (targetPane) {
            targetPane.classList.add('show', 'active');
        }

        // If the click did not come from the back button, add this tab to history.
        if (!isBackButtonPushed()) {
            customModalTabHistory.push(targetTab);
        }
    }

    // Handles the back button click.
    function backButtonClickHandler(
        modalEl: HTMLElement,
        customModalTabHistory: string[],
        setBackButtonPushed: () => void,
        unsetBackButtonPushed: () => void,
    ) {
        if (customModalTabHistory.length > 1) {
            // Remove the current tab from history.
            customModalTabHistory.pop();
            // Get the previous tab from history.
            const previousTab = customModalTabHistory[customModalTabHistory.length - 1];
            const previousTabButton = modalEl.querySelector(
                `.modal-nav-link[data-tab-target="${previousTab}"]`,
            ) as HTMLButtonElement;
            if (previousTabButton) {
                setBackButtonPushed();
                previousTabButton.click();
                unsetBackButtonPushed();
            }
        } else {
            // No previous tab: close the modal.
            const instance = (window as any).bootstrap?.Modal?.getInstance(modalEl);
            if (instance) {
                instance.hide();
            } else {
                modalEl.classList.remove('show');
                modalEl.style.display = 'none';
            }
        }
    }
</script>

<style>
    /* Bottom Shelf Styling */
    .modal-bottom-shelf {
        position: fixed;
        bottom: 0;
        left: 15%;
        width: 70%;
        /* background: rgba(0, 0, 0, 0.7); */
        text-align: center;
        padding: 10px;
        z-index: 7050;
        display: none;
        border-radius: 50px;
    }
    /* Show shelf only when modal is open */
    .modal.show .modal-bottom-shelf {
        display: block;
    }
    .modal-bottom-back,
    .modal-bottom-close {
        background: #fff;
        background: rgba(0, 0, 0, 0.7);
        color: #fff;
        border: none;
        border-radius: 4px;
        padding: 10px 20px;
        font-size: 1.2rem;
        cursor: pointer;
        transition: background 0.3s ease;
        margin: 0 5px;
        border-radius: 50px;
    }

    /* Apply hover effects only for devices that support hover */
    @media (hover: hover) {
        .modal-bottom-back:hover,
        .modal-bottom-close:hover {
            background: #e9ecef;
        }
    }

    /* For devices without hover (touch devices), use :active to show a temporary effect */
    @media (hover: none) {
        .modal-bottom-back:active,
        .modal-bottom-close:active {
            background: #e9ecef;
        }
    }
</style>
