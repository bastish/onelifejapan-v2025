---
interface Props {
    slug: string;
}
const { slug } = Astro.props;
import { baseHost } from '../../utils/utilities.ts';
---

<div class="face-carousel-container" data-json-file={slug} data-base-host={baseHost}>
    <!-- Desktop carousel (3 faces) -->
    <div class="face-carousel face-carousel-desktop">
        <div class="face-circle" data-face="0"><img class="face-img" /></div>
        <div class="face-circle" data-face="1"><img class="face-img" /></div>
        <div class="face-circle" data-face="2"><img class="face-img" /></div>
    </div>

    <!-- Mobile carousel (1 face) -->
    <div class="face-carousel face-carousel-mobile">
        <div class="face-circle" data-face="mobile"><img class="face-img-mobile" /></div>
    </div>
</div>

<style lang="scss">
    @use '../../styles/global' as *;

    .face-carousel-container {
        width: 100%;
        display: flex;
        justify-content: center;
        margin-bottom: 2rem;
    }

    .face-carousel {
        display: flex;
        gap: 40px;
        justify-content: center;
        align-items: center;
        width: 100%;
        max-width: 960px;
    }

    .face-circle {
        width: 180px;
        height: 180px;
        border-radius: 50%;
        overflow: hidden;
        border: 2px solid var(--bs-primary-light);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .face-img,
    .face-img-mobile {
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center center;
        transition: opacity 1s ease-in-out;
        opacity: 1;
        transform: scale(1);
    }

    @media (max-width: 768px) {
        .face-carousel {
            gap: 20px;
        }
        .face-circle {
            width: 100px;
            height: 100px;
        }
    }
    @media (max-width: 768px) {
        .face-carousel {
            flex-direction: column;
            align-items: center;
        }
        .face-circle {
            width: 180px;
            height: 180px;
        }
        .face-circle:nth-child(2),
        .face-circle:nth-child(3) {
            display: none;
        }
    }
    .face-carousel-mobile {
        display: none;
    }

    @media (max-width: 768px) {
        .face-carousel-desktop {
            display: none;
        }
        .face-carousel-mobile {
            display: flex;
            justify-content: center;
            align-items: center;
        }
    }
</style>

<script is:inline>
    document.addEventListener('DOMContentLoaded', async () => {
        const container = document.querySelector('.face-carousel-container');
        if (!container) return;

        const baseHost = container.dataset.baseHost || '';
        const jsonSlug = container.dataset.jsonFile || '';
        const facesDesktop = Array.from(container.querySelectorAll('.face-carousel-desktop .face-img'));
        const faceMobile = container.querySelector('.face-carousel-mobile .face-img-mobile');

        let faceData = [];
        try {
            const res = await fetch(`/data/${jsonSlug}-social-proof.json`);
            if (!res.ok) throw new Error('Could not fetch social proof face data');
            faceData = await res.json();
        } catch (err) {
            console.error('Error loading social proof faces:', err);
            return;
        }

        let desktopIndex = 0;
        let mobileIndex = 0;

        function updateDesktopFaces() {
            const group = faceData.slice(desktopIndex, desktopIndex + 3);
            facesDesktop.forEach((el, i) => {
                const data = group[i];
                if (!data) return;
                const zoom = parseFloat(data.zoom || '1');
                const offsetX = parseFloat(data.offsetX || '0');
                const offsetY = parseFloat(data.offsetY || '0');
                el.src = baseHost + data.image;
                el.alt = data.alt || 'Guest photo';
                el.style.objectPosition = data.objectPosition || 'center';
                el.style.transform = `translate(${offsetX}px, ${offsetY}px) scale(${zoom})`;
            });
        }

        function updateMobileFace() {
            const data = faceData[mobileIndex];
            if (!data) return;
            const zoom = parseFloat(data.zoom || '1');
            const offsetX = parseFloat(data.offsetX || '0');
            const offsetY = parseFloat(data.offsetY || '0');
            faceMobile.src = baseHost + data.image;
            faceMobile.alt = data.alt || 'Guest photo';
            faceMobile.style.objectPosition = data.objectPosition || 'center';
            faceMobile.style.transform = `translate(${offsetX}px, ${offsetY}px) scale(${zoom})`;
        }

        function advanceDesktop() {
            desktopIndex += 3;
            if (desktopIndex >= faceData.length) desktopIndex = 0;
            updateDesktopFaces();
        }

        function advanceMobile() {
            mobileIndex += 1;
            if (mobileIndex >= faceData.length) mobileIndex = 0;
            updateMobileFace();
        }

        updateDesktopFaces();
        updateMobileFace();

        setInterval(advanceDesktop, 5000);
        setInterval(advanceMobile, 5000);
    });
</script>
