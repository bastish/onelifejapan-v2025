---
// LandingPageRouteToggler.astro
import { baseHost } from '../utils/utilities.ts';

type Route = {
    key: string;
    label: string;
    images: string[];
    stops: string[];
    overlay?: string;
};

const routes: Route[] = [
    {
        key: 'kyoto-kanazawa',
        label: 'Kyoto → Kanazawa',
        images: [
            `${baseHost}/assets/img/2024/media/routes/108/358/kyoto-kanazawa-route-examples-Kyoto%20Kanazwa%20Example-medium.jpg`,
        ],
        stops: [
            'Biwako',
            'Hikone',
            'Takashima',
            'Miyama',
            'Kayabuki-no-sato',
            'Ayabe',
            'Maizuru',
            'Takahama',
            'Obama',
            'Wakasa Coast',
            'Mikata Lakes',
            'Fukui',
            'Ono',
            'Kanazawa',
        ],
        overlay: 'top',
    },
    {
        key: 'kyoto-matsumoto',
        label: 'Kyoto → Nakasendo → Matsumoto',
        images: [
            `${baseHost}/assets/img/2024/media/routes/109/359/kyoto-matsumoto-example-Kyoto-matsumoto-example-medium.jpg`,
        ],
        stops: [
            'Biwako',
            'Nakasendo',
            'Hikone',
            'Sekigahara',
            'Gifu',
            'Toki',
            'Ena',
            'Magome',
            'Tsumago',
            'Kiso Valley',
            'Shiojiri',
            'Azumino',
        ],
        overlay: 'top',
    },
    {
        key: 'osaka-hiroshima',
        label: 'Osaka → Hiroshima',
        images: [
            `${baseHost}/assets/img/2024/media/routes/110/360/osaka-hiroshima-sexample-osaka-hiroshima-sexample-medium.jpg`,
        ],
        stops: [
            'Kobe',
            'Seto Ferry',
            'Tsuyama',
            'Miyoshi',
            'Takamatsu',
            'Zentsuji',
            'Kotohira',
            'Tosa',
            'Matsuyama',
            'Shimanami Kaido',
            'Kure',
        ],
        overlay: 'top',
    },
    {
        key: 'osaka-matsuyama',
        label: 'Osaka → Matsuyama',
        images: [
            `${baseHost}/assets/img/2024/media/routes/111/361/osaka-matsuyama-example-osaka-matsuyama-example-medium.jpg`,
        ],
        stops: ['Kobe', 'Seto Ferry', 'Takamatsu', 'Zentsuji', 'Kotohira', 'Tosa', 'Matsuyama', 'Kure'],
        overlay: 'top',
    },
    {
        key: 'kyoto-tottori',
        label: 'Kyoto → Tottori',
        images: [
            `${baseHost}/assets/img/2024/media/routes/112/362/kyoto-tottori-example-kyoto-tottori-example-medium.jpg`,
        ],
        stops: ['Sanin Train', 'Kameoka', 'Fukuchiyama', 'Wadayama', 'Mt. Hyono', 'Kuwahara', 'Tottori'],
        overlay: 'bottom',
    },
];
---

<p>
    If you've <span class="emph">already planned some major destinations</span> - Kyoto, Tokyo, Kanazawa, Osaka - maybe you've
    also looked up the fastest way to get between them. But <span class="emph"
        >between those well-known hubs are villages, coastlines, and mountain passes</span
    >
    most travelers never see.
</p>

<p>
    Below are <span class="emph">just a few examples</span> of how what might otherwise be more travel time between well-known
    destinations can
    <span class="emph">become a meaningful part of your trip</span> if you <span class="emph">don't just pass by</span>,
    but take the <span class="emph">opportunity to discover</span> what's in between.
</p>
<div class="routes-grid" id="route-toggler" data-routes={JSON.stringify(routes)}>
    <div class="route-buttons">
        <!-- 
        <p>
            Below are just a few examples of how what might otherwise be more travel between well-known destinations can
            become a meaningful part of your trip  -  you've already committed to the journey, so why not make it count by
            discovering what's in between?
        </p>

        <p>Most travelers treat the space between stops as a gap to cross. We treat it as a chapter worth reading.</p> -->

        {
            routes.map((route, index) => (
                <button class="route-button" data-key={route.key} data-index={index}>
                    {route.label}
                </button>
            ))
        }
        <p class="fineprint">
            Routes can follow train lines, allowing for partial rides to fit your schedule - from as little as 2 ~ 3
            days.
        </p>
    </div>

    <div class="route-map">
        <div class="map-wrapper">
            <img id="route-image" class="frame" src={routes[0].images[0]} alt="Route Map" />
            <div id="stop-container" class={`overlay-${routes[0].overlay}`}></div>
        </div>
    </div>
</div>

<script type="module">
    const wrapper = document.getElementById('route-toggler');
    const routes = JSON.parse(wrapper.dataset.routes);

    const buttons = wrapper.querySelectorAll('.route-button');
    const img = document.getElementById('route-image');
    const stopContainer = document.getElementById('stop-container');

    function updateUI(route) {
        img.src = route.images[0];

        const chunks = [];
        for (let i = 0; i < route.stops.length; i += 12) {
            chunks.push(route.stops.slice(i, i + 12));
        }

        stopContainer.innerHTML = chunks
            .map(
                (chunk, index) => `
                <ul class="stop-column">
                    
            ${index === 0 ? '<li><strong>Places Between:</strong></li>' : ''}
                    ${chunk.map((stop) => `<li>${stop}</li>`).join('')}
                </ul>
            `,
            )
            .join('');

        stopContainer.className = `overlay-${route.overlay} stop-columns`;

        buttons.forEach((btn) => btn.classList.remove('selected'));
        const selectedButton = wrapper.querySelector(`.route-button[data-key="${route.key}"]`);
        if (selectedButton) selectedButton.classList.add('selected');
    }

    buttons.forEach((btn) => {
        btn.addEventListener('click', () => {
            const index = Number(btn.dataset.index);
            const selectedRoute = routes[index];
            updateUI(selectedRoute);
        });
    });

    updateUI(routes[0]);
</script>
<!-- 
<style lang="scss">
    @use '../styles/global' as *;
    // .routes-grid {
    //     display: flex;
    //     flex-wrap: wrap;
    //     gap: 1rem;
    // }
    .routes-grid {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 1rem;
        align-items: start;

        @media (max-width: 768px) {
            grid-template-columns: 1fr;
        }
    }

    .route-buttons {
        display: flex;
        flex-direction: column;
        flex: 1;
    }

    // .route-map {
    //     flex: 2;
    // }
    .route-map {
        max-width: 600px; // or whatever the map image width is
        width: 100%;
    }

    .map-wrapper {
        position: relative;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .map-wrapper img {
        max-width: 600px;
        height: auto;
        display: block;
        @include respond-to(small) {
            max-width: 100%;
        }
    }

    .overlay-top,
    .overlay-bottom {
        position: absolute;
        display: flex;
        flex-direction: row;
        gap: 2px;
        //background: rgba(255, 255, 255, 0.7);
        //backdrop-filter: blur(2px);
        border-radius: 4px;
        padding: 0px;
        //border: 1px solid red;
        @include respond-to(small) {
            font-size: 0.8em;
            padding-bottom: 5px;
        }
    }

    .overlay-top {
        top: 10px;
        left: 10px;
        @include respond-to(small) {
            top: 8px;
            left: 8px;
        }
    }

    .overlay-bottom {
        bottom: 0px;
        margin-bottom: 0px;
        left: 10px;
    }

    .route-button {
        padding: 0.5rem;
        margin: 0.25rem 0;
        border: 1px solid var(--bs-primary-dark);
        background: white;
        cursor: pointer;
        text-align: left;
        border-radius: 5px;
    }

    .route-button.selected {
        background-color: var(--bs-primary-dark);
        color: white;
    }

    @media (max-width: 768px) {
        .routes-grid {
            flex-direction: column;
        }
    }

    .fineprint {
        margin: 10px 0 0;
        padding-left: 0;
    }
</style> -->
<style lang="scss">
    @use '../styles/global' as *;

    :global(.stop-column) {
        //background: rgba(255, 255, 255, 0.7);
        //backdrop-filter: blur(2px);
        border-radius: 4px;
        padding: 4px;
        //border: 1px solid white;
    }

    :global(.stop-column li) {
        margin: 2px 0;
        padding: 2px 4px;
        background: rgba(255, 255, 255, 0.7);
        border-radius: 2px;
        backdrop-filter: blur(2px);
        list-style: none;
    }
</style>

<style>
    .routes-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: flex-start; /* Align items to the top of the container */
        justify-content: flex-start; /* Ensure left-alignment on large screens */
        align-items: center; /* Align items to the top of the container */
        justify-content: flex-start; /* Ensure left-alignment on large screens */
        @media (max-width: 768px) {
            flex-direction: column; /* Stack buttons and map vertically on small screens */
        }
    }

    .route-buttons {
        display: flex;
        flex-wrap: wrap; /* Allow buttons to wrap to new lines if necessary */
        gap: 0.1rem;
        margin-bottom: 20px; /* Ensure space between buttons and map */
        justify-content: flex-start; /* Align buttons to the left */
    }

    .route-button {
        padding: 0.5rem 1rem; /* Add padding inside buttons */
        margin: 0.25rem 0;
        border: 1px solid var(--bs-primary-dark);
        background: white;
        cursor: pointer;
        text-align: left;
        border-radius: 5px;
        white-space: nowrap; /* Prevent the text from breaking inside buttons */
    }

    .route-button.selected {
        background-color: var(--bs-primary-dark);
        color: white;
    }

    .route-map {
        flex-grow: 1;
        max-width: 600px; /* Limit width of the map */
        width: 100%;
        position: relative;
    }

    .map-wrapper {
        position: relative;
        display: flex;
        flex-direction: column;
        gap: 0.1rem;
    }

    .map-wrapper img {
        max-width: 100%; /* Make sure the map image is responsive */
        height: auto;
    }

    .overlay-top,
    .overlay-bottom {
        position: absolute;
        display: flex;
        flex-direction: row;
        gap: 2px;
        top: 10px;
        left: 10px;
    }

    .overlay-top {
        top: 10px;
        left: 10px;
    }

    .overlay-bottom {
        bottom: 0px;
        left: 10px;
    }

    .fineprint {
        margin: 10px 0 0;
        padding-left: 0;
    }
</style>
