---
import BaseGeneralModal from '../components/modals/BaseGeneralModal.astro';
---

<!-- Contact Page Markup --><!-- Use a Bootstrap Card for the Form Container -->
<form id="contactForm" novalidate>
    <div class="contact-intro">
        <div class="intro-text" id="contact-intro">
            <!-- This will be replaced by JS based on the ?context= parameter -->
            <p>
                Not sure where to start? <span class="emph">No problem</span>. Whether you already have an idea in mind
                or you're just <span class="emph">curious what's possible</span>, feel free to reach out.
            </p>
            <p>
                Tell us your travel dates (if you know them), any special interests in - biking, walking, sightseeing,
                relaxing. <span class="emph">We'll help shape a trip</span> that fits you.
            </p>
            <p>
                <span class="emph">No pressure, no commitment</span> - just real advice from someone who knows rural Japan
                really well.
            </p>
        </div>

        <div class="modal-buttons">
            <BaseGeneralModal show="modal" content="isItForYou" trigger="link" />
            <BaseGeneralModal show="modal" content="difficulty" trigger="link" />
            <BaseGeneralModal show="modal" content="priceEstimate" trigger="link" />
        </div>
    </div>
    <h3 style="margin-top: 20px; margin-bottom:20px;">Contact One Life Japan</h3>
    <p>
        You can reach me directly at
        <a
            href="mailto:kevin@onelifejapan.com"
            title="Contact One Life Japan"
            class="font-weight-bold text-decoration-none">kevin@onelifejapan.com</a
        >, including the following information, or <a href="#form">use the form below</a> - whichever you prefer.
    </p>
    <div class="info-form-flex mb-4">
        <!-- Suggested info list -->
        <div class="helpful-info">
            <p class="text-muted mb-2">The more we know, the better we can tailor things to you:</p>
            <ul class="checklist mb-3">
                <li>When are you thinking of traveling?</li>
                <li>Who’s coming along (ages, energy level, etc.)?</li>
                <li>What else is already on your Japan itinerary?</li>
            </ul>

            <details class="mb-3 more-info-block">
                <summary>More ... </summary>
                <ul class="checklist mt-2">
                    <li>Where will you be in Japan before and after?</li>
                    <li>Anything on the site catch your eye?</li>
                    <li>How active do you usually like to be?</li>
                    <li>Any health or physical considerations?</li>
                    <li>Accommodation preferences or needs?</li>
                    <li>Food allergies or dietary restrictions?</li>
                </ul>
            </details>
        </div>

        <!-- Contact Form Intent Section -->
        <div class="form-intent">
            <label class="d-block mb-2">What are you reaching out for? (Check all that apply)</label><div
                class="form-check"
            >
                <input
                    class="form-check-input"
                    type="checkbox"
                    name="intent[]"
                    id="intent-curious"
                    value="just-curious"
                    checked
                />
                <label class="form-check-label" for="intent-curious">I’m curious about visiting rural Japan</label>
            </div>
            <div class="form-check">
                <input
                    class="form-check-input"
                    type="checkbox"
                    name="intent[]"
                    id="intent-advice"
                    value="just-advice"
                />
                <label class="form-check-label" for="intent-advice"
                    >I’m looking for advice about traveling in rural Japan
                </label>
            </div>
            <div class="form-check">
                <input
                    class="form-check-input"
                    type="checkbox"
                    name="intent[]"
                    id="intent-plan"
                    value="trip-planning"
                />
                <label class="form-check-label" for="intent-plan">I’m interested in planning a custom trip</label>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="name" class="sr-only">Your Name</label>
        <input type="text" class="form-control" name="name" id="name" placeholder="Your Name" required />
    </div>
    <div class="form-group">
        <label for="email" class="sr-only">Your Email</label>
        <input type="email" class="form-control" name="email" id="email" placeholder="Your Email" required />
    </div>
    <!-- Added Email Confirmation Field -->
    <div class="form-group">
        <label for="confirmEmail" class="sr-only">Confirm Your Email</label>
        <input
            type="email"
            class="form-control"
            name="confirmEmail"
            id="confirmEmail"
            placeholder="Confirm Your Email"
            required
        />
    </div>
    <div class="form-check form-group mt-3">
        <input class="form-check-input" type="checkbox" name="joinMailingList" id="joinMailingList" />

        <label class="form-check-label" for="joinMailingList">
            I’d like you to let me know if anything comes up that might be relevant based on the plans I describe — like
            a local event near my travel dates. No newsletters or mailing list, just a personal heads-up based on what I
            share below.
        </label>
    </div>

    <div class="form-group">
        <label for="message" class="sr-only">Your Message</label>
        <textarea
            class="form-control"
            name="message"
            id="message"
            rows="15"
            placeholder="Tell us anything that might help — dates, interests, questions… (or see the list above)"
            required></textarea>
    </div>
    <!-- Other form fields as needed -->

    <script>
        // Populate the textarea with the questions from the list and store the default content.
        document.addEventListener('DOMContentLoaded', () => {
            const questionList = document.getElementById('question-list');
            const textarea = document.getElementById('message') as HTMLFormElement;
            if (questionList && textarea) {
                const listItems = questionList.querySelectorAll('li');
                const questions = Array.from(listItems).map((item) => `* ${item.textContent?.trim()}`);
                const defaultContent = '\n\n\n' + questions.join('\n\n');
                //textarea.value = defaultContent;
                // Store the default value on a data attribute for later comparison.
                //textarea.dataset.defaultValue = defaultContent;
            }
        });
    </script>

    <!-- Honeypot field: hidden from users -->
    <div style="display:none;">
        <label for="honeypot">Leave this field blank</label>
        <input type="text" name="honeypot" id="honeypot" />
    </div>

    <button type="submit" class="btn btn-primary btn-block">Send</button>
</form>

<!-- Modal Markup (Bootstrap 5) -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="errorModalLabel">Oops. Somethings Missing ¯\_(ツ)_/¯</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Error message injected here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Additional Custom Styles -->
<style lang="scss">
    @use '../styles/global' as *;
    /* Hide screen reader-only labels visually while keeping accessibility */
    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        border: 0;
    }
    /* Slight padding adjustments for form groups */
    .form-group {
        margin-bottom: 1rem;
    }
    .btn {
        background: var(--bs-link-color);
    }
    @include respond-to(small) {
        .modal-title {
            font-size: 1.2em;
        }
    }

    // added
    .contact-intro {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        flex-wrap: wrap;
        margin-bottom: 20px;

        .intro-text {
            flex: 1 1 60%;
            min-width: 250px;
        }

        .modal-buttons {
            flex: 1 1 35%;
            display: flex;
            flex-direction: column;
            gap: 10px;
            min-width: 200px;
            text-align: center;
        }
    }

    @media (max-width: 768px) {
        .contact-intro {
            flex-direction: column;
            align-items: center;
        }
        .modal-buttons {
            flex-direction: row;
            justify-content: center;
            margin-top: 10px;
        }
    }
    .checklist li {
        margin-top: 5px;
    }
    .helpful-info {
        border: 1px solid var(--bs-primary-dark);
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 20px;
    }
    .info-form-flex {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        align-items: flex-start;

        .helpful-info,
        .form-intent {
            flex: 1 1 300px;
            min-width: 250px;
        }

        .checklist {
            list-style-type: disc;
            padding-left: 1.25rem;
            font-size: 0.95rem;
            line-height: 1.5;
        }

        .more-info-block summary {
            cursor: pointer;
            font-weight: 500;
            color: var(--bs-link-color);
            margin-top: 0.5rem;
        }
    }
</style>

<!-- TypeScript for AJAX submission, reactive response, and content replacement -->
<script>
    declare const bootstrap: any;
    declare function gtag(command: string, eventName: string, params?: Record<string, any>): void;

    document.addEventListener('DOMContentLoaded', () => {
        const formRenderTime = Date.now();
        let userTyped = false;
        let userPasted = false;

        const formFields = document.querySelectorAll('#contactForm input, #contactForm textarea');
        formFields.forEach((field) => {
            field.addEventListener('input', () => {
                userTyped = true;
            });
            field.addEventListener('paste', () => {
                userPasted = true;
            });
        });

        // Helper function: Display error modal with the provided message.
        function showErrorModal(message: string) {
            const modalEl = document.getElementById('errorModal');
            if (modalEl) {
                const modalBody = modalEl.querySelector('.modal-body');
                if (modalBody) {
                    modalBody.textContent = message;
                }
                const errorModal = new bootstrap.Modal(modalEl);
                errorModal.show();
            }
        }

        const form = document.getElementById('contactForm') as HTMLFormElement;
        const responseContainer = document.getElementById('formResponse');
        const emailField = document.getElementById('email') as HTMLFormElement;
        const confirmEmailField = document.getElementById('confirmEmail') as HTMLFormElement;
        const messageField = document.getElementById('message') as HTMLFormElement;

        form.addEventListener('submit', async (event) => {
            event.preventDefault();

            // Email confirmation validation.
            const email = emailField.value.trim();
            const confirmEmail = confirmEmailField.value.trim();
            if (email !== confirmEmail) {
                showErrorModal('Error: Email addresses do not match.');
                return;
            }

            // Check that the message field has extra information.
            const currentMessage = messageField!.value.trim();
            const defaultMessage = messageField!.dataset.defaultValue?.trim();
            if (!userPasted && currentMessage === defaultMessage) {
                showErrorModal('Please fill in the message with additional information.');
                return;
            }

            const elapsedTime = (Date.now() - formRenderTime) / 1000;
            const formData = new FormData(form);
            formData.append('elapsedTime', elapsedTime.toString());
            formData.append('userTyped', userTyped ? 'true' : 'false');
            formData.append('userPasted', userPasted ? 'true' : 'false');

            try {
                const response = await fetch('https://my.onelifejapan.com/www/api/contact.php', {
                    method: 'POST',
                    body: formData,
                });
                const json = await response.json();

                if (response.ok && json.success) {
                    // Hide the form.
                    form.style.display = 'none';
                    // Remove the "hide-success" class so that the success message appears.
                    const successContainer = document.querySelector('.hide-success');
                    if (successContainer) {
                        successContainer.classList.remove('hide-success');
                    }
                    // Update the success message container with the response message.
                    const successDiv = document.getElementById('formResponse');
                    if (successDiv) {
                        successDiv.innerHTML = json.message;
                    }
                    gtag('event', 'conversion', {
                        send_to: 'AW-1002351511/pmFQCILVhoEZEJfX-t0D',
                    });
                } else {
                    showErrorModal(json.message || 'Submission error. Please try again.');
                }
            } catch (error) {
                console.error('Error submitting form:', error);
                showErrorModal('An error occurred. Please try again later.');
            }
        });
    });
</script>
<script>
    (function () {
        const params = new URLSearchParams(window.location.search);
        const context = params.get('context');

        const introEl = document.getElementById('contact-intro');
        const defaultH1 = document.querySelector('.default-h1');
        const mobileH1 = document.querySelector('.mobile-h1');

        let introHTML = '';
        let titleText = 'Planning to Visit Rural Japan? Let’s Talk'; // set default

        switch (context) {
            case 'family':
                titleText = 'Let’s Start Planning Your Family Trip';
                introHTML = `
<p>Curious what’s possible? Whether you’ve got ideas or not, we’re here to help.</p>
<p>Just share your dates, kids’ ages, or anything you’re hoping for — we’ll shape suggestions around your pace and style.</p>
<p><span class="emph">No pressure</span> — just real input from someone who’s helped families explore rural Japan.</p>
`;

                break;

            case 'custom':
                titleText = 'Need Help Adding Rural Japan to Your Trip?';
                introHTML = `
        <p>Looking for a rural Japan experience tailored to your interests?</p>
        <p>Whether you're biking, hiking, relaxing, or mixing it up - we can help shape a trip around your travel plans.</p>
        <p><span class="emph">Just ask anything</span> - we'll get back with practical ideas and local insight.</p>
      `;
                break;
            // no default anymore
        }

        // Always apply titleText
        if (defaultH1) defaultH1.textContent = titleText;
        if (mobileH1) mobileH1.textContent = titleText;

        // Only update intro text if context-specific HTML was set
        if (introHTML && introEl) {
            introEl.innerHTML = introHTML;
        }
    })();
</script>
