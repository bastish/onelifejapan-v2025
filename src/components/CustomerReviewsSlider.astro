---
const show = Number(Astro.props.show ?? 3);
const spv = [1, 2, 3].includes(show) ? show : 3;

// Fetch reviews server-side
const ids = Astro.props.ids as (number | string)[] | undefined;
const tags = Astro.props.tags as (number | string)[] | undefined;
const params = new URLSearchParams();
if (ids && ids.length) params.set('ids', ids.join(','));
else if (tags && tags.length) params.set('tags', tags.join(','));
const url = `http://127.0.0.1:8011/api/quotation/${params.toString() ? '?' + params : ''}`;

const res = await fetch(url);
if (!res.ok) throw new Error(`Fetch failed: ${res.status}`);
const data: Array<{ id: number; quote: string }> = await res.json();
const reviews = data.map((d) => ({ text: d.quote }));

// JSON for the client
const reviewsJson = JSON.stringify(reviews);
---

<div class="quote-section" data-reviews={reviewsJson}>
    <button class="arrow left quote-prev" aria-label="Previous">&#8249;</button>

    <div class="quote-track">
        <div class="quote-item first">
            <blockquote>{reviews[0]?.text || 'No quote available'}</blockquote>
        </div>
        <div class="quote-item second">
            <blockquote>{reviews[1]?.text || 'No quote available'}</blockquote>
        </div>
        <div class="quote-item third">
            <blockquote>{reviews[2]?.text || 'No quote available'}</blockquote>
        </div>
    </div>

    <button class="arrow right quote-next" aria-label="Next">&#8250;</button>
</div>

<style lang="scss">
    @use '../styles/global' as *;

    .quote-section {
        display: flex;
        gap: 20px; /* Space between cards */
        margin-top: 40px;
        width: 100%;
        position: relative;
        justify-content: space-between;
        align-items: center;
    }

    .quote-track {
        display: flex;
        gap: 20px; /* Space between cards */
        width: 100%;
        justify-content: center;
    }

    .quote-item {
        background-color: #fff;
        border-radius: 8px;
        padding: 0px;
        text-align: center;
        flex: 1;
        width: 30%; /* Make each card take up 1/3 of the space */
        display: inline-block;
        box-sizing: border-box;
        opacity: 1; /* Default visibility */
        transition: opacity 0.5s ease; /* Smooth fade transition */
    }

    blockquote {
        margin: 0;
        border-top: 1px solid var(--bs-primary-dark);
        border-bottom: 1px solid var(--bs-primary-dark);
        font-style: italic;
        font-size: 0.9em;
        line-height: 1.4;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        @include respond-to(small) {
            font-size: 0.8em;
        }
    }

    .arrow {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(0, 0, 0, 0.1);
        border: none;
        padding: 0.5rem;
        font-size: 1.5rem;
        cursor: pointer;
        z-index: 2;
    }

    .arrow.left {
        left: 0.5rem;
    }

    .arrow.right {
        right: 0.5rem;
    }
    .third {
        @include respond-to(large) {
            display: none;
        }
    }
    /* Hide the second and third cards on small screens (below 768px) */
    .second,
    .third {
        @include respond-to(small) {
            display: none;
        }
    }
</style>

<script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
        const container = document.querySelector('.quote-section');
        if (!container) {
            console.error('Container not found');
            return;
        }

        const reviews = JSON.parse(container.dataset.reviews || '[]');
        let current = 0;
        const totalQuotes = reviews.length;

        // Populate initial cards with quotes
        const cards = container.querySelectorAll('.quote-item');

        const updateQuotes = () => {
            const visibleCards = Array.from(cards).filter((card) => card.style.display !== 'none');
            const numVisible = visibleCards.length;

            // Adjust the content based on how many cards are visible
            visibleCards.forEach((card, index) => {
                const quote = reviews[(current + index) % totalQuotes]?.text || 'No quote available';

                // Fade out the card before updating the text
                card.style.opacity = '0';

                setTimeout(() => {
                    // Update the quote text after fade-out
                    card.querySelector('blockquote').innerHTML = quote;

                    // Fade in the new quote
                    card.style.opacity = '1';
                }, 500); // Wait for fade-out to finish before updating the quote
            });
        };

        // Next button event listener
        const nextBtn = container.querySelector('.quote-next');
        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                const visibleCards = Array.from(cards).filter((card) => card.style.display !== 'none');
                const numVisible = visibleCards.length;

                current = (current + numVisible) % totalQuotes; // Loop through as many quotes as visible
                updateQuotes();
            });
        } else {
            console.warn('Next button not found');
        }

        // Previous button event listener
        const prevBtn = container.querySelector('.quote-prev');
        if (prevBtn) {
            prevBtn.addEventListener('click', () => {
                const visibleCards = Array.from(cards).filter((card) => card.style.display !== 'none');
                const numVisible = visibleCards.length;

                current = (current - numVisible + totalQuotes) % totalQuotes; // Loop backwards by visible number
                updateQuotes();
            });
        } else {
            console.warn('Previous button not found');
        }

        // Initialize the display of quotes
        updateQuotes();
    });
</script>
