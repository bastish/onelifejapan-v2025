---
import CustomItineraryRouteAccordianItem from './CustomItineraryRouteAccordianItem.astro';
//import RouteImageModal from '../../components/RouteImageModal.astro';
// Use a fixed, global modal ID.
const modalId = 'RouteImageModal';
import RWGPSMapEmbed from './RWGPSMapEmbed.astro';
//import IconWrapper from '../../components/IconWrapper.jsx';
const { routes } = Astro.props;
---

<div class="accordion custom-itinerary-accordian" id="itineraryAccordion">
    {
        routes?.map((route: any, index: number) => (
            <div class="accordion-item">
                <h2 class="accordion-header" id={`heading-${index}`}>
                    {/* {' '}
                    <span id={`icon-${route.id}`} class="chevron-icon">
                        <IconWrapper iconName="ChevronRightCircle" />
                    </span> */}
                    <button
                        class="accordion-button collapsed"
                        type="button"
                        data-bs-toggle="collapse"
                        data-bs-target={`#collapse-${index}`}
                        aria-expanded="false"
                        aria-controls={`collapse-${index}`}
                        data-route-slug={route.slug}
                    >
                        {route.title}
                    </button>
                </h2>
                <div
                    id={`collapse-${index}`}
                    class="accordion-collapse collapse"
                    aria-labelledby={`heading-${index}`}
                    data-bs-parent="#itineraryAccordion"
                >
                    <div class="accordion-body">
                        {/* <div class="panel panel-green">
                            <RWGPSMapEmbed route={route} />
                        </div> */}
                        <div id={`accordion-content-${route.id}`} class="accordion-content-placeholder">
                            <p>Loading contentâ€¦</p>
                        </div>
                        {/* <CustomItineraryRouteAccordianItem route={route} modalId={modalId} /> */}
                    </div>
                </div>
            </div>
        ))
    }
</div>

<!-- Global modal: Only one instance on the page -->
<!-- <RouteImageModal modalId={modalId} /> -->

<style>
    .accordion {
        margin-bottom: 2rem;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Listen for clicks on accordion buttons
        document.querySelectorAll<HTMLButtonElement>('.accordion-button').forEach((button) => {
            button.addEventListener('click', (event: Event) => {
                const targetSelector = button.getAttribute('data-bs-target');
                if (!targetSelector) return;

                const contentContainer = document.querySelector(
                    `${targetSelector} .accordion-body .accordion-content-placeholder`,
                ) as HTMLElement | null;
                if (!contentContainer) return;

                // Extract route id from the content container id (assuming it's set like "accordion-content-{id}")
                const idMatch = contentContainer.id.match(/accordion-content-(.+)/);
                if (!idMatch) return;
                const routeId = idMatch[1];

                // Only fetch if not already loaded (dataset properties are strings)
                if (!contentContainer.dataset.loaded) {
                    fetch(`/route-accordian/${routeId}/`)
                        .then((response) => response.text())
                        .then((html) => {
                            contentContainer.innerHTML = html;
                            contentContainer.dataset.loaded = 'true';

                            document.dispatchEvent(new Event('ajaxContentLoaded'));
                        })
                        .catch((err) => {
                            contentContainer.innerHTML = `<p>Error loading content.</p>`;
                            console.error(err);
                        });
                }
            });
        });
    });
</script>
<script>
    // Function to open the accordion item based on the current hash.
    function openAccordionForHash(): void {
        const hash = window.location.hash;
        if (hash) {
            const slug = hash.substring(1); // Remove the '#' character.
            // Find the accordion button with a matching data-route-slug attribute.
            const targetButton = document.querySelector(
                `button[data-route-slug="${slug}"]`,
            ) as HTMLButtonElement | null;
            if (targetButton) {
                // If the accordion item is collapsed, trigger a click.
                if (targetButton.classList.contains('collapsed')) {
                    targetButton.click();
                }
                // Scroll with an offset to account for fixed headers.
                setTimeout(() => {
                    const offset = 280; // Adjust this offset as needed.
                    const rect = targetButton.getBoundingClientRect();
                    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                    const targetY = rect.top + scrollTop - offset;
                    window.scrollTo({
                        top: targetY,
                        behavior: 'smooth',
                    });
                }, 300); // Delay to allow the accordion to open.
            }
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        // Existing code: load content on click.
        document.querySelectorAll<HTMLButtonElement>('.accordion-button').forEach((button) => {
            button.addEventListener('click', (event) => {
                const targetSelector = button.getAttribute('data-bs-target');
                if (!targetSelector) return;

                const contentContainer = document.querySelector(
                    `${targetSelector} .accordion-body .accordion-content-placeholder`,
                ) as HTMLElement | null;
                if (!contentContainer) return;

                // Extract route id from the content container id (assuming it's set like "accordion-content-{id}")
                const idMatch = contentContainer.id.match(/accordion-content-(.+)/);
                if (!idMatch) return;
                const routeId = idMatch[1];

                // Only fetch if not already loaded.
                if (!contentContainer.dataset.loaded) {
                    fetch(`/route-accordian/${routeId}/`)
                        .then((response) => response.text())
                        .then((html) => {
                            contentContainer.innerHTML = html;
                            contentContainer.dataset.loaded = 'true';
                        })
                        .catch((err) => {
                            contentContainer.innerHTML = `<p>Error loading content.</p>`;
                            console.error(err);
                        });
                }
            });
        });

        // Check hash on page load.
        openAccordionForHash();
    });

    // Listen for hash changes (e.g., when clicking a menu link).
    window.addEventListener('hashchange', openAccordionForHash);
</script>

<style lang="scss">
    .chevron-icon {
        // font-size: .5em;
        // border: 1px solid red;
        margin-top: -10px;
        padding-right: 5px;
        color: var(--highlight-color);
    }
</style>

<!-- accoditan Item .scss  -->

<style>
    /* Image slider and thumbnails */
    .image-slider {
        position: relative;
        width: 50%;
        overflow: hidden; /* hide native scrollbar */
    }
    .image-container {
        display: flex;
        transition: transform 0.3s ease;
        overflow-x: hidden;
        gap: 10px;
        white-space: nowrap;
        margin-top: 10px;
    }
    .map-thumb {
        flex: 0 0 auto;
        min-width: 150px;
        /* width: 150px; */
        max-width: 150px;
        height: auto;
        margin-right: 5px;
    }
    .frame {
        max-width: 100%;
        height: auto;
        margin-right: 10px;
    }

    /* Scroll buttons styling */
    .scroll-button {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.8);
        border: 1px solid #ccc;
        border-radius: 50%;
        padding: 8px;
        cursor: pointer;
        z-index: 10;
        font-size: 16px;
        line-height: 1;
    }
    .scroll-button.left {
        left: 5px;
    }
    .scroll-button.right {
        right: 5px;
    }

    /* Overall layout: stats on the left, images on the right */
    .images-and-stats {
        display: flex;
        gap: 20px;
        align-items: flex-start;
    }

    /* Stats styling */
    .stats {
        display: flex;
        flex-direction: column;
        gap: 5px;
        font-family: Arial, sans-serif;
        margin-top: 5px;
        margin-right: 5px;
    }
    .stats .col {
        display: flex;
        align-items: center;
        border-bottom: 1px solid #e0e0e0;
        padding: 2px 0;
    }
    .stats .col-title {
        display: inline-block;
        width: 100px;
        font-weight: bold;
        color: #333;
        margin-right: 10px;
    }
    .stats p {
        margin: 0;
        color: #555;
        font-size: 0.95em;
    }

    /* Responsive: stack stats and images vertically on smaller screens */
    @media (max-width: 768px) {
        .images-and-stats {
            flex-direction: column;
        }
        .map-thumb {
            flex: 0 0 auto;
            min-width: 100px;
            max-width: 100px;
            height: auto;
            margin-right: 3px;
        }
    }

    .route-description {
        margin-top: 20px;
    }

    .route-highlights-box {
        border: 1px solid #528c1f;
        border-left: 2px solid #528c1f;
        border-radius: 8px;
        margin-left: 20px;
        margin-right: 15px;
        margin-bottom: 25px;
        width: 45%;
        display: none;
        float: right;
        background: var(--bs-primary-ultralight);
        box-shadow: 2px 2px 15px #ccc;
    }

    .route-highlights-box ul {
        margin-left: 20px;
        margin-right: 15px;
    }

    .route-highlights-box h4 {
        background: var(--bs-primary-dark);
        margin-top: 0;
        /* Adjust padding on the header as desired */
        padding: 10px 15px;
        /* Use negative margins to pull h4 out of the container's padding */
        /* margin: -15px -15px 15px -20px; */
        width: 100%;
        color: #fff;
    }

    .route-embededmap-box {
        width: 100%;
    }
</style>
