---
const { itinerary } = Astro.props;

const endpoint = `http://127.0.0.1:8011/api/itinerary/${itinerary.id}/highlightpoints/`;

// Fetch the highlight collections for the itinerary.
let data: any = {};
console.log('data:', data);
console.log('endpoint:', endpoint);
try {
    const res = await fetch(endpoint);
    data = await res.json();
    //console.log('data:', data);
} catch (error) {
    console.error('Error fetching highlight collections:', error);
}

---

<div class="highlight-collections">
    {
        data.collections && data.collections.length > 0 ? (
            data.collections.map((collection: any, colIndex: number) => (
                // Each collection gets its own accordion container.
                <div class="accordion mb-3" id={`accordionCollection-${colIndex}`}>
                    {collection.map((highlight: any, hlIndex: number) => {
                        //console.log('highlight:', highlight);
                        const collapseId = `collapse-${colIndex}-${hlIndex}`;
                        const headingId = `heading-${colIndex}-${hlIndex}`;
                        return (
                            <div class="accordion-item">
                                <h2 class="accordion-header" id={headingId}>
                                    <button
                                        class="highlight-accordion-button collapsed compact-trigger"
                                        type="button"
                                        data-bs-toggle="collapse"
                                        data-bs-target={`#${collapseId}`}
                                        aria-expanded="false"
                                        aria-controls={collapseId}
                                    >
                                        {highlight.title}
                                    </button>
                                </h2>
                                <div
                                    id={collapseId}
                                    class="accordion-collapse collapse"
                                    data-bs-parent={`#accordionCollection-${colIndex}`}
                                >
                                    <div
                                        class="accordion-body highlight-content-placeholder"
                                        data-highlight-id={highlight.id}
                                    >
                                        <p>Loading content…</p>
                                    </div>
                                </div>
                            </div>
                        );
                    })}
                </div>
            ))
        ) : (
            <style>
                #possible-highlights-section {
                    display: none!important;
                }
            </style>
        )
    }
</div>

<div style="display: none;">
    <span id="chevronRight">
        ▶︎
    </span>
    <span id="chevronDown">
    </span>
</div>

<style lang="scss">
    .compact-trigger {
        padding: 1rem 0.5rem;
        font-size: 1.2rem;
        line-height: 1;
        background: transparent;
        border: none;
        color: var(--bs-primary-dark);
        font-weight: 600;
        width: 100%;
        text-align: left;
    }
    .compact-trigger::before {
        /* content: '•'; */
        margin-right: 0.3rem;
        color: var(--bs-primary);
    }
    .accordion-header {
        margin: 0;
    }
    .highlight-content-placeholder {
        padding: 10px;
        border: 1px solid var(--bs-primary-light);
        border-radius: 4px;
        background: #f8f9fa;
    }

    .no-info {
        color: var(--bs-primary);
        font-weight: 800;
        margin-top: 10px;
        margin-top: 10px;
        font-size: 1.3em;
        display: block;
    }
</style>

<script>
    // When the document is ready, attach click handlers to accordion buttons.
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.highlight-accordion-button').forEach((button) => {
            button.addEventListener('click', () => {
                const collapseSelector = button.getAttribute('data-bs-target');
                //console.log('collapseSelector: ', collapseSelector);
                const placeholder = document.querySelector(`${collapseSelector} .highlight-content-placeholder`) as HTMLElement;
                if (placeholder && !placeholder.dataset.loaded) {
                    // Extract the highlight point id from the data attribute.
                    const highlightId = placeholder.getAttribute('data-highlight-id');
                    //console.log(`/highlight-points/${highlightId}/`);
                    if (highlightId !== null) {
                        //console.log('highlightId:', highlightId);
                        // Fetch the static HTML for this highlight point.
                        fetch(`/highlight-points/${highlightId}/`)
                            .then((response) => response.text())
                            .then((html) => {
                                placeholder.innerHTML = html;
                                placeholder.dataset.loaded = "true";
                            })
                            .catch((err) => {
                                placeholder.innerHTML = `<p>Error loading content.</p>`;
                                console.error(err);
                            });
                    } else {
                        placeholder.innerHTML = `<p style="text-align: center; font-style: italic;"><span class="no-info">┐( ͡◉ ͜ʖ ͡◉)┌ </span><br>Still searching for the best links to share.</p>`;
                    }
                }
            });
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // For each placeholder, find the corresponding accordion container
        document.querySelectorAll('.highlight-collection').forEach((placeholder) => {
            const index = placeholder.getAttribute('data-index');
            const accordion = document.getElementById(`accordionCollection-${index}`);
            if (accordion) {
                // Move the accordion into the placeholder.
                // Option 1: Append the accordion inside the placeholder.
                placeholder.appendChild(accordion);

                // Option 2 (if you want to replace the placeholder entirely):
                // placeholder.parentNode.replaceChild(accordion, placeholder);
            } else {
                console.warn(`No accordion found for data-index="${index}"`);
            }
        });
    });
</script>
