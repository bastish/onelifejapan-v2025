---
const { itinerary } = Astro.props;

const endpoint = `http://127.0.0.1:8011/api/itinerary/${itinerary.id}/highlightpoints/`;

// Fetch the highlight collections for the itinerary.
let data: any = {};
console.log('data:', data);
console.log('endpoint:', endpoint);
try {
    const res = await fetch(endpoint);
    data = await res.json();
    //console.log('data:', data);
} catch (error) {
    console.error('Error fetching highlight collections:', error);
}

---

<div class="highlight-collections">
    {
        data.collections && data.collections.length > 0 ? (
            data.collections.map((collection: any, colIndex: number) => (
                // Each collection gets its own accordion container.
                <div class="accordion mb-3" id={`accordionCollection-${colIndex}`}>
                    {collection.map((highlight: any, hlIndex: number) => {
                        //console.log('highlight:', highlight);
                        const collapseId = `collapse-${colIndex}-${hlIndex}`;
                        const headingId = `heading-${colIndex}-${hlIndex}`;
                        return (
                            <div class="accordion-item">
                                <h2 class="accordion-header" id={headingId}>
                                    <button
                                        class="highlight-accordion-button collapsed compact-trigger"
                                        type="button"
                                        data-bs-toggle="collapse"
                                        data-bs-target={`#${collapseId}`}
                                        aria-expanded="false"
                                        aria-controls={collapseId}
                                    >
                                        {highlight.title}
                                    </button>
                                </h2>
                                <div
                                    id={collapseId}
                                    class="accordion-collapse collapse"
                                    data-bs-parent={`#accordionCollection-${colIndex}`}
                                >
                                    <div
                                        class="accordion-body highlight-content-placeholder"
                                        data-highlight-id={highlight.id}
                                    >
                                        <p>Loading content…</p>
                                    </div>
                                </div>
                            </div>
                        );
                    })}
                </div>
            ))
        ) : (
            <style>
                #possible-highlights-section {
                    display: none!important;
                }
            </style>
        )
    }
</div>

<div style="display: none;">
    <span id="chevronRight">
        ▶︎
    </span>
    <span id="chevronDown">
    </span>
</div>

<style lang="scss">
    .compact-trigger {
        padding: 1rem 0.5rem;
        font-size: 1.2rem;
        line-height: 1;
        background: transparent;
        border: none;
        color: var(--bs-primary-dark);
        font-weight: 600;
        width: 100%;
        text-align: left;
    }
    .compact-trigger::before {
        /* content: '•'; */
        margin-right: 0.3rem;
        color: var(--bs-primary);
    }
    .accordion-header {
        margin: 0;
    }
    .highlight-content-placeholder {
        padding: 10px;
        border: 1px solid var(--bs-primary-light);
        border-radius: 4px;
        background: #f8f9fa;
    }

    .no-info {
        color: var(--bs-primary);
        font-weight: 800;
        margin-top: 10px;
        margin-top: 10px;
        font-size: 1.3em;
        display: block;
    }
    .accordion-collapse {
    transition: none !important;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const accordionButtons = document.querySelectorAll('.highlight-accordion-button');

    accordionButtons.forEach((button) => {
        button.addEventListener('click', () => {
            const collapseSelector = button.getAttribute('data-bs-target');
            const placeholder = document.querySelector(`${collapseSelector} .highlight-content-placeholder`) as HTMLElement;
            if (placeholder && !placeholder.dataset.loaded) {
                const highlightId = placeholder.getAttribute('data-highlight-id');
                if (highlightId !== null) {
                    fetch(`/highlight-points/${highlightId}/`)
                        .then((response) => response.text())
                        .then((html) => {
                            placeholder.innerHTML = html;
                            placeholder.dataset.loaded = "true";
                        })
                        .catch((err) => {
                            placeholder.innerHTML = `<p>Error loading content.</p>`;
                            console.error(err);
                        });
                } else {
                    placeholder.innerHTML = `<p style="text-align: center; font-style: italic;"><span class="no-info">No content available.</span></p>`;
                }
            }
        });
    });

    // Use Bootstrap’s collapse events to adjust scroll.
    document.querySelectorAll('.accordion-collapse').forEach((collapseEl) => {
        collapseEl.addEventListener('shown.bs.collapse', (event) => {
            // The new active element (the one that just expanded)
            const target = event.target as HTMLElement;
            // Use scrollIntoView for a smooth scroll after the panel is shown
            setTimeout(() => {
                target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }, 100); // Delay, adjust timing according to your animation speed
        });
    });
});
document.addEventListener('DOMContentLoaded', () => {
    let savedScrollPos = 0;

    // Capture the scroll position when an accordion header is clicked.
    document.querySelectorAll('.highlight-accordion-button').forEach(button => {
        button.addEventListener('click', () => {
            savedScrollPos = window.scrollY || window.pageYOffset;
        });
    });

    // After the panel is fully expanded, reset scroll position.
    document.querySelectorAll('.accordion-collapse').forEach(collapseEl => {
        collapseEl.addEventListener('shown.bs.collapse', () => {
            window.scrollTo({ top: savedScrollPos, behavior: 'instant' });
        });
    });
});


</script>
