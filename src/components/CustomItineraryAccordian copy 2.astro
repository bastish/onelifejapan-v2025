---
import CustomItineraryRouteAccordianItem from './CustomItineraryRouteAccordianItem.astro';
import RWGPSMapEmbed from './RWGPSMapEmbed.astro';
const modalId = 'RouteImageModal';
const { routes } = Astro.props;
---

<!-- Custom collapsible accordion (no Bootstrap) -->
<div class="collapsible-accordion">
    {
        routes?.map((route: any) => (
            <div class="collapsible-item" id={`item-${route.id}`} key={route.id}>
                <h2 class="collapsible-header">
                    <button type="button" class="collapsible-btn" data-route-slug={route.slug} data-route-id={route.id}>
                        {route.title}
                    </button>
                </h2>
                <div class="collapsible-content">
                    <div class="accordion-content-placeholder" id={`accordion-content-${route.id}`} data-loaded="false">
                        <p>Loading contentâ€¦</p>
                    </div>
                    <div set:html={route.description} />
                    {/*
          Optionally, you could uncomment the following if you want to include
          the CustomItineraryRouteAccordianItem as well:
          <CustomItineraryRouteAccordianItem route={route} modalId={modalId} />
        */}
                </div>
            </div>
        ))
    }
</div>

<style lang="scss">
    .collapsible-accordion {
        margin-bottom: 2rem;
    }

    .collapsible-header {
        margin: 0;
    }

    .collapsible-btn {
        width: 100%;
        background: #eee;
        border: none;
        outline: none;
        text-align: left;
        padding: 1rem;
        font-size: 1.1rem;
        cursor: pointer;
        transition: background 0.3s;
    }

    .collapsible-btn:hover {
        background: #ddd;
    }

    /* Content is hidden by default; note the transition on max-height */
    .collapsible-content {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease-out;
        background: #f9f9f9;
        padding: 0 1rem;
    }

    /* When an item is active, allow the content to be visible */
    .collapsible-item.active .collapsible-content {
        /* Setting a high max-height so the container expands enough */
        max-height: 100vh;
        padding: 1rem;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Get all collapsible buttons
        const buttons = document.querySelectorAll('.collapsible-btn');
        buttons.forEach((button) => {
            button.addEventListener('click', function () {
                const item = button.closest('.collapsible-item');
                const content = item.querySelector('.collapsible-content');
                const routeId = button.getAttribute('data-route-id');

                // Toggle the active class on the collapsible item
                if (item.classList.contains('active')) {
                    // Collapse item
                    item.classList.remove('active');
                    content.style.maxHeight = null;
                } else {
                    // Expand this item
                    item.classList.add('active');
                    // Set maxHeight to its scrollHeight so the content becomes visible
                    content.style.maxHeight = content.scrollHeight + 'px';

                    // Load dynamic content if not loaded
                    const contentContainer = document.getElementById(`accordion-content-${routeId}`);
                    if (contentContainer && contentContainer.dataset.loaded !== 'true') {
                        fetch(`/route-accordian/${routeId}/`)
                            .then((response) => response.text())
                            .then((html) => {
                                contentContainer.innerHTML = html;
                                contentContainer.dataset.loaded = 'true';
                                document.dispatchEvent(new Event('ajaxContentLoaded'));
                            })
                            .catch((err) => {
                                contentContainer.innerHTML = `<p>Error loading content.</p>`;
                                console.error(err);
                            });
                    }
                }
            });
        });
    });
</script>
